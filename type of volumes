
Here are examples of each volume type you mentioned, with the configuration for Kubernetes:

1. emptyDir Example
emptyDir is a temporary volume that exists as long as the Pod exists. It is used for sharing data between containers or for temporary storage.

#Example Configuration:
apiVersion: v1
kind: Pod
metadata:
  name: emptydir-example
spec:
  containers:
  - name: app-container
    image: nginx:latest
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html
  volumes:
  - name: shared-data
    emptyDir: {}
------
#Explanation:
emptyDir creates an empty directory that the container can use. When the Pod is deleted, the data in the volume is lost.
--------
  
  2. hostPath Example
hostPath allows you to mount a file or directory from the host node's filesystem into a Pod.

#Example Configuration:
apiVersion: v1
kind: Pod
metadata:
  name: hostpath-example
spec:
  containers:
  - name: app-container
    image: nginx:latest
    volumeMounts:
    - name: host-directory
      mountPath: /host-data
  volumes:
  - name: host-directory
    hostPath:
      path: /mnt/data
      type: Directory
--------------
 # Explanation:
The hostPath volume mounts the directory /mnt/data from the host filesystem into the container at /host-data.

  This is useful when you need access to host-specific files or directories inside the container.
----------
  3. PersistentVolume (PV) and PersistentVolumeClaim (PVC) Example
PersistentVolume (PV) provides durable storage resources in Kubernetes, and PersistentVolumeClaim (PVC) is used to request storage from a PV.

#Step 1: Define a PersistentVolume (PV)

apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/data

  #Explanation:
PersistentVolume my-pv is created on the host machine's /mnt/data directory, with 1Gi of storage.

#  Step 2: Define a PersistentVolumeClaim (PVC)

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

#Explanation:
The PersistentVolumeClaim my-pvc requests storage from a PV. It asks for 1Gi of storage and requires ReadWriteOnce access mode.

  #Step 3: Define a Pod Using the PVC

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
spec:
  containers:
  - name: nginx
    image: nginx:latest
    volumeMounts:
    - name: my-volume
      mountPath: /usr/share/nginx/html
  volumes:
  - name: my-volume
    persistentVolumeClaim:
      claimName: my-pvc

  #Explanation:
The Pod nginx-pod mounts the PVC my-pvc to /usr/share/nginx/html inside the container, giving it access to the persistent storage.

  4. ConfigMap Example
A ConfigMap is used to inject configuration files or environment variables into containers. This can help manage application configurations separately from the application code.

Step 1: Define a ConfigMap

apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  config.properties: |
    key1=value1
    key2=value2
#Explanation:
The ConfigMap named app-config contains configuration data, in this case a config.properties file with key-value pairs.

Step 2: Mount ConfigMap as a Volume in a Pod

apiVersion: v1
kind: Pod
metadata:
  name: configmap-example
spec:
  containers:
  - name: app-container
    image: nginx:latest
    volumeMounts:
    - name: config-volume
      mountPath: /etc/app/config
  volumes:
  - name: config-volume
    configMap:
      name: app-config

  #Explanation:
The ConfigMap app-config is mounted as a volume at /etc/app/config inside the container.

  5. Secret Example
A Secret is used to store sensitive data, such as passwords, tokens, and SSH keys, and can be mounted into Pods or used as environment variables.

Step 1: Define a Secret

apiVersion: v1
kind: Secret
metadata:
  name: app-secret
type: Opaque
data:
  username: YWRtaW4=  # base64 encoded "admin"
  password: cGFzc3dvcmQ=  # base64 encoded "password"

  #Explanation:
The Secret contains sensitive data (username and password) encoded in base64.

  Step 2: Mount Secret as a Volume in a Pod

apiVersion: v1
kind: Pod
metadata:
  name: secret-example
spec:
  containers:
  - name: app-container
    image: nginx:latest
    volumeMounts:
    - name: secret-volume
      mountPath: /etc/secret
  volumes:
  - name: secret-volume
    secret:
      secretName: app-secret



  --------------------------------------------------------------
emptyDir: Temporary storage for Pods that lasts as long as the Pod itself.
hostPath: Mounts a file or directory from the host node's filesystem into a Pod.
PersistentVolume (PV) and PersistentVolumeClaim (PVC): Used for durable and persistent storage across Pod lifecycles.
ConfigMap: Used for injecting non-sensitive configuration data into Pods.
Secret: Used for injecting sensitive data, like passwords or tokens, into Pods securely.
  
